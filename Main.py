import config, logging, Markups
from aiogram import Dispatcher, Bot, types, executor
from BaseData import BaseData


logging.basicConfig(level=logging.INFO)
bot = Bot(config.TOKEN)
dp = Dispatcher(bot)
ChannelID = "@testchnbot"

db = BaseData("basedata.db")

@dp.message_handler(commands=['start'])
async def cmd_start(msg : types.Message):
    balance = 0 #+ db.sql(f"SELECT Balance FROM Subs WHERE userID = {msg.from_user.id}")[0][0]
    NumInvited = 0 #+ db.sql(f"SELECT UsersUsesLink FROM Subs WHERE userID = {msg.from_user.id}")[0][0]
    personalLink = f"https://t.me/EvenEasyBot?start={msg.from_user.id}"
    ref = msg.text.split(' ')[1]
    db.sql(f"UPDATE Subs SET UsersUsesLink += 1 WHERE userID={ref}")
    msg1 = f"""{msg.from_user.first_name}, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. 

–£ –Ω–∞—Å —Ç—É—Ç –∫–æ–Ω–∫—É—Ä—Å. 
–†–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º Qredo —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 500 —à—Ç—É–∫üî•

–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–æ–ª–µ–µ 400 TON (–ø—Ä–∏–º–µ—Ä–Ω–æ 1500$)üî•

–£—Å–ª–æ–≤–∏—è: 
 1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–∞ @Qredo_Russian
 2. –°–æ–∑–¥–∞—Ç—å Qredo Fund (https://t.me/Qredo_Russian/6084) –∏ —É–∫–∞–∑–∞—Ç—å –≤ –±–æ—Ç–µ Wallet code
 3. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ª—é–¥–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.
 
 –¢–≤–æ–π –±–∞–ª–∞–Ω—Å : {balance}
 –ö–æ–ª-–≤–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö : {NumInvited}

 –¢–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ : {personalLink}
 
 """
    await msg.answer(msg1, reply_markup=Markups.Participal)

@dp.callback_query_handler(text=["Participal"])
async def callback(call : types.CallbackQuery):
    try:
        url = await bot.create_chat_invite_link(ChannelID)
        user = await bot.get_chat_member(ChannelID, call.from_user.id)
        print(db.sql(f"SELECT userID FROM Subs WHERE UserID = {user.user.id}"))
        if db.sql(f"SELECT userID FROM Subs WHERE UserID = {user.user.id}") == []:
            db.sql(f"INSERT INTO Subs VALUES ({user.user.id}, '{url.name}' ,0, 0)")
        await call.answer("‚ÑπÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞")
    except Exception as E:
        await call.answer("‚ùå –í—ã –Ω–µ –ü–æ–¥–ø–∏—Å–∞–Ω—ã.")
        print(f"ERROR - {E}")
    

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)